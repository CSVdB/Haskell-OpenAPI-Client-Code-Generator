#!/bin/bash
set -e
[[ -d /root/.stack/snapshots/x86_64-linux/d2f1d79601122b1003c68e260f770c1d32d5fe7a028973b8192e738556d0b8b3 ]] && cp -Rn /root/.stack/snapshots/x86_64-linux/d2f1d79601122b1003c68e260f770c1d32d5fe7a028973b8192e738556d0b8b3 /root/.stack/snapshots/x86_64-linux/711b0e993dd52035c0641daec2c20681935ad613e80e3462008d52395107852b || true

root=$(pwd)

rm -rf coverage-files
mkdir coverage-files

stack --no-terminal test --coverage
mv $(stack path --local-hpc-root)/openapi3-code-generator/openapi3-code-generator-test/openapi3-code-generator-test.tix coverage-files

specifications=(
  google-payment.json
  official-api-with-examples.yaml
  official-callback-example.yaml
  official-link-example.yaml
  official-petstore-expanded.yaml
  official-uspto.yaml
  petstore-expanded.json
  uber.json
  stripe-api.yml
  official-petstore.yaml
  petstore-running-example.yaml
)

stack clean
stack build --coverage
GENERATOR_EXE=$(stack path --local-install-root)/bin/openapi3-code-generator-exe
cd .circleci/testing

set +e
let errors=0

testingDir=$(pwd)

for specification in "${specifications[@]}"; do
  cd $testingDir
  printf "\n\nGenerate tix file for specification $specification\n"
  echo "-------------------------"
  $GENERATOR_EXE "../specifications/$specification" --force --response-type-suffix="Response'"
  mv openapi3-code-generator-exe.tix "../../coverage-files/$specification.tix"
  printf "\n-------------------------\n\n"
done

set -e

cd $root

rm -rf tix-output
mkdir tix-output

PKG_NAME=$(openapi3-code-generator/*.cabal | grep "name:" | sed "s/name:\s*\(.*\)/\1/")
PKG_HASH=$(ls $(stack path --dist-dir)/hpc | grep $PKG_NAME | sed "s/$PKG_NAME-[0-9]*-\([0-9A-Za-z]*\)/\1/g")

for file in $(ls coverage-files); do
  cat coverage-files/$file | sed "s/TixModule \"[^\/]*\//TixModule \"$PKG_HASH\//g" > tix-output/$file
done

TMP=$(mktemp)
cat coverage.overlay | sed "s/module \"/module \"$PKG_HASH\//g" > $TMP
stack exec hpc -- overlay --hpcdir=$(stack path --dist-dir)/hpc --srcdir=. $TMP > tix-output/overlay.tix

tixes=$(for file in $(ls tix-output); do echo "tix-output/$file"; done)

stack hpc report $tixes --destdir coverage-output

exit $errors
