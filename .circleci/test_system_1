#!/bin/bash

set -e

specifications=(
  google-payment.json
  hetzner.json
  official-api-with-examples.yaml
  official-callback-example.yaml
  official-link-example.yaml
  official-petstore-expanded.yaml
  official-uspto.yaml
  petstore-expanded.json
  selenium.yaml
  spot_api.yml
  uber.json
  z_complex_self_made_example.yml
)

outDir=openapi

[[ -d /root/.stack/snapshots/x86_64-linux/d2f1d79601122b1003c68e260f770c1d32d5fe7a028973b8192e738556d0b8b3 ]] && cp -Rn /root/.stack/snapshots/x86_64-linux/d2f1d79601122b1003c68e260f770c1d32d5fe7a028973b8192e738556d0b8b3 /root/.stack/snapshots/x86_64-linux/711b0e993dd52035c0641daec2c20681935ad613e80e3462008d52395107852b || true
GENERATOR_EXE=$(stack path --local-install-root)/bin/openapi3-code-generator-exe
cd .circleci/testing

set +e
let errors=0

testingDir=$(pwd)

continueOnFailure () {
  exitCode=$?
  if [[ $exitCode -ne 0 ]]; then
    let errors=errors+1
    printf "\n\n=======================================\n"
    echo "Exit code $exitCode received from step $1, skipping the following steps for specification file '$2'."
    printf "=======================================\n\n"
    continue
  fi
}

for specification in "${specifications[@]}"; do
  echo ""
  echo "-----------------------------"
  echo "-----------------------------"
  echo ""
  echo "         $specification"
  echo ""
  echo "-----------------------------"
  echo "-----------------------------"
  echo ""
  cd $testingDir
  rm -rf $outDir
  printf "\n\nRun compile test for $specification\n"
  echo "-------------------------"
  $GENERATOR_EXE "../specifications/$specification" --output-dir=$outDir --response-type-suffix="Response'" --opaque-schema="aggTrade"
  continueOnFailure "code generation" "$specification"
  cd $outDir
  stack build --fast
  continueOnFailure "build" "$specification"
  stack haddock --fast
  continueOnFailure "haddock generation" "$specification"
  printf "\n-------------------------\n\n"
done

exit $errors
