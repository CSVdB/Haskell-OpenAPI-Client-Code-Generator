-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema PetByAge
module OpenAPI.Types.PetByAge where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified OpenAPI.Common
import OpenAPI.TypeAlias
import {-# SOURCE #-} OpenAPI.Types.Cat
import {-# SOURCE #-} OpenAPI.Types.PetByType

-- | Defines the data type for the schema PetByAge
-- 
-- 
data PetByAge = PetByAge {
  -- | age
  petByAgeAge :: GHC.Types.Int
  -- | another_relative
  , petByAgeAnother_relative :: (GHC.Maybe.Maybe PetByAgeAnother_relativeVariants)
  -- | first_relative
  , petByAgeFirst_relative :: (GHC.Maybe.Maybe PetByAgeFirst_relative)
  -- | nickname
  , petByAgeNickname :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | relative
  , petByAgeRelative :: (GHC.Maybe.Maybe PetByAgeRelativeVariants)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PetByAge
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "age" (petByAgeAge obj) : (Data.Aeson..=) "another_relative" (petByAgeAnother_relative obj) : (Data.Aeson..=) "first_relative" (petByAgeFirst_relative obj) : (Data.Aeson..=) "nickname" (petByAgeNickname obj) : (Data.Aeson..=) "relative" (petByAgeRelative obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "age" (petByAgeAge obj) GHC.Base.<> ((Data.Aeson..=) "another_relative" (petByAgeAnother_relative obj) GHC.Base.<> ((Data.Aeson..=) "first_relative" (petByAgeFirst_relative obj) GHC.Base.<> ((Data.Aeson..=) "nickname" (petByAgeNickname obj) GHC.Base.<> (Data.Aeson..=) "relative" (petByAgeRelative obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON PetByAge
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PetByAge" (\obj -> ((((GHC.Base.pure PetByAge GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "age")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "another_relative")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "first_relative")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "nickname")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "relative"))
-- | Defines the data type for the schema PetByAgeAnother_relativeOneOf4
-- 
-- 
data PetByAgeAnother_relativeOneOf4 = PetByAgeAnother_relativeOneOf4 {
  -- | hunts
  petByAgeAnother_relativeOneOf4Hunts :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | pet_type
  , petByAgeAnother_relativeOneOf4Pet_type :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PetByAgeAnother_relativeOneOf4
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "hunts" (petByAgeAnother_relativeOneOf4Hunts obj) : (Data.Aeson..=) "pet_type" (petByAgeAnother_relativeOneOf4Pet_type obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "hunts" (petByAgeAnother_relativeOneOf4Hunts obj) GHC.Base.<> (Data.Aeson..=) "pet_type" (petByAgeAnother_relativeOneOf4Pet_type obj))
instance Data.Aeson.Types.FromJSON.FromJSON PetByAgeAnother_relativeOneOf4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PetByAgeAnother_relativeOneOf4" (\obj -> (GHC.Base.pure PetByAgeAnother_relativeOneOf4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "hunts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pet_type"))
-- | Define the one-of schema PetByAgeAnother_relative
-- 
-- 
data PetByAgeAnother_relativeVariants
    = PetByAgeAnother_relativeCat Cat
    | PetByAgeAnother_relativePetByType PetByType
    | PetByAgeAnother_relativeText Data.Text.Internal.Text
    | PetByAgeAnother_relativePetByAgeAnother_relativeOneOf4 PetByAgeAnother_relativeOneOf4
    | PetByAgeAnother_relativeListTText ([Data.Text.Internal.Text])
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PetByAgeAnother_relativeVariants
    where toJSON (PetByAgeAnother_relativeCat a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PetByAgeAnother_relativePetByType a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PetByAgeAnother_relativeText a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PetByAgeAnother_relativePetByAgeAnother_relativeOneOf4 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PetByAgeAnother_relativeListTText a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PetByAgeAnother_relativeVariants
    where parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ PetByAgeAnother_relativeCat a
                              Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
                                                                       Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ PetByAgeAnother_relativePetByType a
                                                                       Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
                                                                                                                Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ PetByAgeAnother_relativeText a
                                                                                                                Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
                                                                                                                                                         Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ PetByAgeAnother_relativePetByAgeAnother_relativeOneOf4 a
                                                                                                                                                         Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
                                                                                                                                                                                                  Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ PetByAgeAnother_relativeListTText a
                                                                                                                                                                                                  Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the data type for the schema PetByAgeFirst_relative
-- 
-- 
data PetByAgeFirst_relative = PetByAgeFirst_relative {
  -- | age
  petByAgeFirst_relativeAge :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | ananyoftype
  , petByAgeFirst_relativeAnanyoftype :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  -- | another_relative
  , petByAgeFirst_relativeAnother_relative :: (GHC.Maybe.Maybe PetByAgeFirst_relativeAnother_relativeVariants)
  -- | hunts
  , petByAgeFirst_relativeHunts :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | pet_type
  , petByAgeFirst_relativePet_type :: PetByAgeFirst_relativePet_type
  -- | relative
  , petByAgeFirst_relativeRelative :: (GHC.Maybe.Maybe PetByAgeFirst_relativeRelativeVariants)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PetByAgeFirst_relative
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "age" (petByAgeFirst_relativeAge obj) : (Data.Aeson..=) "ananyoftype" (petByAgeFirst_relativeAnanyoftype obj) : (Data.Aeson..=) "another_relative" (petByAgeFirst_relativeAnother_relative obj) : (Data.Aeson..=) "hunts" (petByAgeFirst_relativeHunts obj) : (Data.Aeson..=) "pet_type" (petByAgeFirst_relativePet_type obj) : (Data.Aeson..=) "relative" (petByAgeFirst_relativeRelative obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "age" (petByAgeFirst_relativeAge obj) GHC.Base.<> ((Data.Aeson..=) "ananyoftype" (petByAgeFirst_relativeAnanyoftype obj) GHC.Base.<> ((Data.Aeson..=) "another_relative" (petByAgeFirst_relativeAnother_relative obj) GHC.Base.<> ((Data.Aeson..=) "hunts" (petByAgeFirst_relativeHunts obj) GHC.Base.<> ((Data.Aeson..=) "pet_type" (petByAgeFirst_relativePet_type obj) GHC.Base.<> (Data.Aeson..=) "relative" (petByAgeFirst_relativeRelative obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON PetByAgeFirst_relative
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PetByAgeFirst_relative" (\obj -> (((((GHC.Base.pure PetByAgeFirst_relative GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "age")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ananyoftype")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "another_relative")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "hunts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pet_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "relative"))
-- | Define the one-of schema PetByAgeFirst_relativeAnother_relative
-- 
-- 
data PetByAgeFirst_relativeAnother_relativeVariants
    = PetByAgeFirst_relativeAnother_relativeCat Cat
    | PetByAgeFirst_relativeAnother_relativePetByType PetByType
    | PetByAgeFirst_relativeAnother_relativeText Data.Text.Internal.Text
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PetByAgeFirst_relativeAnother_relativeVariants
    where toJSON (PetByAgeFirst_relativeAnother_relativeCat a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PetByAgeFirst_relativeAnother_relativePetByType a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PetByAgeFirst_relativeAnother_relativeText a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PetByAgeFirst_relativeAnother_relativeVariants
    where parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ PetByAgeFirst_relativeAnother_relativeCat a
                              Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
                                                                       Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ PetByAgeFirst_relativeAnother_relativePetByType a
                                                                       Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
                                                                                                                Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ PetByAgeFirst_relativeAnother_relativeText a
                                                                                                                Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the enum schema PetByAgeFirst_relativePet_type
-- 
-- 
data PetByAgeFirst_relativePet_type
    = PetByAgeFirst_relativePet_typeEnumOther Data.Aeson.Types.Internal.Value
    | PetByAgeFirst_relativePet_typeEnumTyped Data.Text.Internal.Text
    | PetByAgeFirst_relativePet_typeEnumString_Cat
    | PetByAgeFirst_relativePet_typeEnumString_Dog
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PetByAgeFirst_relativePet_type
    where toJSON (PetByAgeFirst_relativePet_typeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PetByAgeFirst_relativePet_typeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PetByAgeFirst_relativePet_typeEnumString_Cat) = "Cat"
          toJSON (PetByAgeFirst_relativePet_typeEnumString_Dog) = "Dog"
instance Data.Aeson.Types.FromJSON.FromJSON PetByAgeFirst_relativePet_type
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "Cat" -> PetByAgeFirst_relativePet_typeEnumString_Cat
                                            | val GHC.Classes.== "Dog" -> PetByAgeFirst_relativePet_typeEnumString_Dog
                                            | GHC.Base.otherwise -> PetByAgeFirst_relativePet_typeEnumOther val)
-- | Define the one-of schema PetByAgeFirst_relativeRelative
-- 
-- 
data PetByAgeFirst_relativeRelativeVariants
    = PetByAgeFirst_relativeRelativeCat Cat
    | PetByAgeFirst_relativeRelativePetByType PetByType
    | PetByAgeFirst_relativeRelativeText Data.Text.Internal.Text
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PetByAgeFirst_relativeRelativeVariants
    where toJSON (PetByAgeFirst_relativeRelativeCat a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PetByAgeFirst_relativeRelativePetByType a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PetByAgeFirst_relativeRelativeText a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PetByAgeFirst_relativeRelativeVariants
    where parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ PetByAgeFirst_relativeRelativeCat a
                              Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
                                                                       Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ PetByAgeFirst_relativeRelativePetByType a
                                                                       Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
                                                                                                                Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ PetByAgeFirst_relativeRelativeText a
                                                                                                                Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Define the one-of schema PetByAgeRelative
-- 
-- 
data PetByAgeRelativeVariants
    = PetByAgeRelativeCat Cat
    | PetByAgeRelativePetByType PetByType
    | PetByAgeRelativeText Data.Text.Internal.Text
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PetByAgeRelativeVariants
    where toJSON (PetByAgeRelativeCat a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PetByAgeRelativePetByType a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PetByAgeRelativeText a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PetByAgeRelativeVariants
    where parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ PetByAgeRelativeCat a
                              Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
                                                                       Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ PetByAgeRelativePetByType a
                                                                       Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
                                                                                                                Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ PetByAgeRelativeText a
                                                                                                                Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a