-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation multiParam
module OpenAPI.Operations.MultiParam where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified OpenAPI.Common
import OpenAPI.Types

-- | > GET /pet/multiparam/{status}
-- 
-- Operation with multiple parameters
multiParam :: forall m . OpenAPI.Common.MonadHTTP m => MultiParamParameters           -- ^ Contains all available parameters of this operation (query and path parameters)
  -> OpenAPI.Common.StripeT m (Network.HTTP.Client.Types.Response MultiParamResponse) -- ^ Monadic computation which returns the result of the operation
multiParam parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either MultiParamResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> MultiParamResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                       Dog)
                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (OpenAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/pet/multiparam/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ OpenAPI.Common.stringifyModel (multiParamParametersPathStatus parameters))) GHC.Base.++ ""))) [OpenAPI.Common.QueryParameter (Data.Text.pack "status") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (multiParamParametersQueryStatus parameters)) (Data.Text.pack "form") GHC.Types.False,
penAPI.Common.QueryParameter (Data.Text.pack "filter") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> multiParamParametersQueryFilter parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the data type for the schema multiParamParameters
-- 
-- 
data MultiParamParameters = MultiParamParameters {
  -- | pathStatus: Represents the parameter named \'status\'
  -- 
  -- Status in path
  multiParamParametersPathStatus :: MultiParamParametersPathStatus
  -- | queryFilter: Represents the parameter named \'filter\'
  -- 
  -- Filter the entries?
  , multiParamParametersQueryFilter :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | queryStatus: Represents the parameter named \'status\'
  -- 
  -- Status in query
  , multiParamParametersQueryStatus :: MultiParamParametersQueryStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON MultiParamParameters
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "pathStatus" (multiParamParametersPathStatus obj) : (Data.Aeson..=) "queryFilter" (multiParamParametersQueryFilter obj) : (Data.Aeson..=) "queryStatus" (multiParamParametersQueryStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "pathStatus" (multiParamParametersPathStatus obj) GHC.Base.<> ((Data.Aeson..=) "queryFilter" (multiParamParametersQueryFilter obj) GHC.Base.<> (Data.Aeson..=) "queryStatus" (multiParamParametersQueryStatus obj)))
instance Data.Aeson.Types.FromJSON.FromJSON MultiParamParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "MultiParamParameters" (\obj -> ((GHC.Base.pure MultiParamParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathStatus")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryFilter")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryStatus"))
-- | Defines the enum schema multiParamParametersPathStatus
-- 
-- Represents the parameter named \'status\'
-- 
-- Status in path
data MultiParamParametersPathStatus
    = MultiParamParametersPathStatusEnumOther Data.Aeson.Types.Internal.Value
    | MultiParamParametersPathStatusEnumTyped GHC.Types.Int
    | MultiParamParametersPathStatusEnumNumber_1'0
    | MultiParamParametersPathStatusEnumNumber_3'0
    | MultiParamParametersPathStatusEnumNumber_5'0
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON MultiParamParametersPathStatus
    where toJSON (MultiParamParametersPathStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (MultiParamParametersPathStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (MultiParamParametersPathStatusEnumNumber_1'0) = Data.Aeson.Types.Internal.Number (Data.Scientific.scientific 1 0)
          toJSON (MultiParamParametersPathStatusEnumNumber_3'0) = Data.Aeson.Types.Internal.Number (Data.Scientific.scientific 3 0)
          toJSON (MultiParamParametersPathStatusEnumNumber_5'0) = Data.Aeson.Types.Internal.Number (Data.Scientific.scientific 5 0)
instance Data.Aeson.FromJSON MultiParamParametersPathStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== Data.Aeson.Types.Internal.Number (Data.Scientific.scientific 1 0)
                                          then MultiParamParametersPathStatusEnumNumber_1'0
                                          else if val GHC.Classes.== Data.Aeson.Types.Internal.Number (Data.Scientific.scientific 3 0)
                                                then MultiParamParametersPathStatusEnumNumber_3'0
                                                else if val GHC.Classes.== Data.Aeson.Types.Internal.Number (Data.Scientific.scientific 5 0)
                                                      then MultiParamParametersPathStatusEnumNumber_5'0
                                                      else MultiParamParametersPathStatusEnumOther val)
-- | Defines the enum schema multiParamParametersQueryStatus
-- 
-- Represents the parameter named \'status\'
-- 
-- Status in query
data MultiParamParametersQueryStatus
    = MultiParamParametersQueryStatusEnumOther Data.Aeson.Types.Internal.Value
    | MultiParamParametersQueryStatusEnumTyped Data.Text.Internal.Text
    | MultiParamParametersQueryStatusEnumString_available
    | MultiParamParametersQueryStatusEnumString_pending
    | MultiParamParametersQueryStatusEnumString_sold
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON MultiParamParametersQueryStatus
    where toJSON (MultiParamParametersQueryStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (MultiParamParametersQueryStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (MultiParamParametersQueryStatusEnumString_available) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "available"
          toJSON (MultiParamParametersQueryStatusEnumString_pending) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pending"
          toJSON (MultiParamParametersQueryStatusEnumString_sold) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sold"
instance Data.Aeson.FromJSON MultiParamParametersQueryStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "available")
                                          then MultiParamParametersQueryStatusEnumString_available
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pending")
                                                then MultiParamParametersQueryStatusEnumString_pending
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sold")
                                                      then MultiParamParametersQueryStatusEnumString_sold
                                                      else MultiParamParametersQueryStatusEnumOther val)
-- | Represents a response of the operation 'multiParam'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'MultiParamResponseError' is used.
data MultiParamResponse =                   
   MultiParamResponseError GHC.Base.String  -- ^ Means either no matching case available or a parse error
  | MultiParamResponse200 Dog               -- ^ successful operation
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | > GET /pet/multiparam/{status}
-- 
-- The same as 'multiParam' but accepts an explicit configuration.
multiParamWithConfiguration :: forall m . OpenAPI.Common.MonadHTTP m => OpenAPI.Common.Configuration  -- ^ The configuration to use in the request
  -> MultiParamParameters                                                                             -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response MultiParamResponse)                                        -- ^ Monadic computation which returns the result of the operation
multiParamWithConfiguration config
                            parameters = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either MultiParamResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> MultiParamResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                        Dog)
                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (OpenAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/pet/multiparam/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ OpenAPI.Common.stringifyModel (multiParamParametersPathStatus parameters))) GHC.Base.++ ""))) [OpenAPI.Common.QueryParameter (Data.Text.pack "status") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (multiParamParametersQueryStatus parameters)) (Data.Text.pack "form") GHC.Types.False,
penAPI.Common.QueryParameter (Data.Text.pack "filter") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> multiParamParametersQueryFilter parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /pet/multiparam/{status}
-- 
-- The same as 'multiParam' but returns the raw 'Data.ByteString.Char8.ByteString'.
multiParamRaw :: forall m . OpenAPI.Common.MonadHTTP m => MultiParamParameters                         -- ^ Contains all available parameters of this operation (query and path parameters)
  -> OpenAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
multiParamRaw parameters = GHC.Base.id (OpenAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/pet/multiparam/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ OpenAPI.Common.stringifyModel (multiParamParametersPathStatus parameters))) GHC.Base.++ ""))) [OpenAPI.Common.QueryParameter (Data.Text.pack "status") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (multiParamParametersQueryStatus parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                    OpenAPI.Common.QueryParameter (Data.Text.pack "filter") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> multiParamParametersQueryFilter parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /pet/multiparam/{status}
-- 
-- The same as 'multiParam' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
multiParamWithConfigurationRaw :: forall m . OpenAPI.Common.MonadHTTP m => OpenAPI.Common.Configuration  -- ^ The configuration to use in the request
  -> MultiParamParameters                                                                                -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)                          -- ^ Monadic computation which returns the result of the operation
multiParamWithConfigurationRaw config
                               parameters = GHC.Base.id (OpenAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/pet/multiparam/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ OpenAPI.Common.stringifyModel (multiParamParametersPathStatus parameters))) GHC.Base.++ ""))) [OpenAPI.Common.QueryParameter (Data.Text.pack "status") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (multiParamParametersQueryStatus parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                           OpenAPI.Common.QueryParameter (Data.Text.pack "filter") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> multiParamParametersQueryFilter parameters) (Data.Text.pack "form") GHC.Types.False])
